# -*- coding: utf-8 -*-
"""FDA LO1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zoy7zzvBN7AvAiCJpyyCvr4z9db8_-OO
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import f_oneway
from sklearn.preprocessing import LabelEncoder

# Load the dataset
data = pd.read_csv('retail_sales_data.csv')

#Checking for null values
data.isnull().sum()

#Handling missing values - Numerical data
data['Marketing Expenditure'] = data['Marketing Expenditure'].fillna(data['Marketing Expenditure'].median())
data['Number of Products Sold'] = data['Number of Products Sold'].fillna(data['Number of Products Sold'].median())

#Handling missing values - Categorical data
data['Region'] = data['Region'].fillna(data['Region'].mode()[0])

#Re-checking for null values
data.isna().sum()

#Encode categorical variable - Region
le = LabelEncoder()
data = data.apply(lambda col: le.fit_transform(col) if col.dtype == 'object' else col)

# Calculate the Pearson correlation coefficients
corr_marketing_products = data['Marketing Expenditure'].corr(data['Number of Products Sold'])
corr_sales_products = data['Sales Amount'].corr(data['Number of Products Sold'])
corr_marketing_sales = data['Marketing Expenditure'].corr(data['Sales Amount'])

corr_marketing_products, corr_sales_products, corr_marketing_sales

#ANOVA
# Perform ANOVA to check relation between region and products sold
regions = data['Region'].unique()
anova_data = [data['Number of Products Sold'][data['Region'] == region] for region in regions]
anova_result = f_oneway(*anova_data)

# Print ANOVA results
print(f'ANOVA F-statistic: {anova_result.statistic}')
print(f'ANOVA p-value: {anova_result.pvalue}')

# Visualize the distribution of products sold across regions
plt.figure(figsize=(10, 6))
sns.boxplot(x='Region', y='Number of Products Sold', data=data)
plt.title('Distribution of Number of Products Sold across Regions')
plt.xlabel('Region')
plt.ylabel('Number of Products Sold')
plt.show()

# Scatter plot with regression line for Marketing Expenditure vs. Number of Products Sold
plt.figure(figsize=(14, 6))

plt.subplot(1, 3, 1)
sns.regplot(x='Marketing Expenditure', y='Number of Products Sold', data=data)
plt.title('Marketing Expenditure vs. Number of Products Sold')
plt.xlabel('Marketing Expenditure')
plt.ylabel('Number of Products Sold')

# Scatter plot with regression line for Number of Products Sold vs. Sales Amount
plt.subplot(1, 3, 2)
sns.regplot(x='Number of Products Sold', y='Sales Amount', data=data)
plt.title('Number of Products Sold vs. Sales Amount')
plt.xlabel('Number of Products Sold')
plt.ylabel('Sales Amount')

# Scatter plot with regression line for Number of Products Sold vs. Sales Amount
plt.subplot(1, 3, 3)
sns.regplot(x='Marketing Expenditure', y='Sales Amount', data=data)
plt.title('Marketing Expenditure vs. Sales Amount')
plt.xlabel('Marketing Expenditure')
plt.ylabel('Sales Amount')

plt.tight_layout()
plt.show()

#Linear algebra - Calculating slope and intercept
#ME vs Products sold
m, c = np.polyfit(data['Marketing Expenditure'], data['Number of Products Sold'], 1)
print("Calculations for ME vs Products sold")
print(f"Slope (m): {m}")
print(f"Intercept (c): {c}\n")

#Amount vs Products sold
m, c = np.polyfit(data['Sales Amount'], data['Number of Products Sold'], 1)
print("Calculations for Products sold vs Amount")
print(f"Slope (m): {m}")
print(f"Intercept (c): {c}\n")

#ME vs Amount
m, c = np.polyfit(data['Marketing Expenditure'], data['Sales Amount'], 1)
print("Calculations for ME vs Amount")
print(f"Slope (m): {m}")
print(f"Intercept (c): {c}\n")


# Feature selection
X = data.drop(columns=['Date', 'Sales Amount','Region'])
y = data['Sales Amount']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Apply Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = r2_score(y_test, y_pred)

print(f'Accuracy of the model: {accuracy:.2f}')

# Plot predicted vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.title('Predicted vs Actual Values')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.show()